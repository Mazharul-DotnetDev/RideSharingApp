// <auto-generated />
using System;
using BlazorAppServer.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorAppServer.Migrations
{
    [DbContext(typeof(RideShareDb))]
    partial class RideShareDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BlazorAppServer.Models.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RideId"));

                    b.Property<string>("DepartureLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartureTimeFormatted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedFare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsSmokingAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("RideDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("RideDuration")
                        .HasColumnType("time");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("Ride");

                    b.HasData(
                        new
                        {
                            RideId = 1,
                            DepartureLocation = "City A",
                            DepartureTime = new DateTime(2024, 3, 12, 3, 55, 25, 377, DateTimeKind.Local).AddTicks(3205),
                            DepartureTimeFormatted = "2024-03-12 03:55",
                            Destination = "City B",
                            EstimatedFare = 50.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Comfortable sedan, music available",
                            RideDuration = new TimeSpan(0, 3, 0, 0, 0),
                            UserId = 1,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 2,
                            DepartureLocation = "City C",
                            DepartureTime = new DateTime(2024, 3, 12, 4, 55, 25, 377, DateTimeKind.Local).AddTicks(3225),
                            DepartureTimeFormatted = "2024-03-12 04:55",
                            Destination = "City D",
                            EstimatedFare = 80.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Spacious van, no smoking",
                            RideDuration = new TimeSpan(0, 4, 0, 0, 0),
                            UserId = 2,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 3,
                            DepartureLocation = "City A",
                            DepartureTime = new DateTime(2024, 3, 12, 3, 55, 25, 377, DateTimeKind.Local).AddTicks(3321),
                            DepartureTimeFormatted = "2024-03-12 03:55",
                            Destination = "City B",
                            EstimatedFare = 50.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Comfortable sedan, music available",
                            RideDuration = new TimeSpan(0, 3, 0, 0, 0),
                            UserId = 3,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 4,
                            DepartureLocation = "City C",
                            DepartureTime = new DateTime(2024, 3, 12, 4, 55, 25, 377, DateTimeKind.Local).AddTicks(3327),
                            DepartureTimeFormatted = "2024-03-12 04:55",
                            Destination = "City D",
                            EstimatedFare = 80.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Spacious van, no smoking",
                            RideDuration = new TimeSpan(0, 4, 0, 0, 0),
                            UserId = 4,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 5,
                            DepartureLocation = "City A",
                            DepartureTime = new DateTime(2024, 3, 12, 3, 55, 25, 377, DateTimeKind.Local).AddTicks(3331),
                            DepartureTimeFormatted = "2024-03-12 03:55",
                            Destination = "City B",
                            EstimatedFare = 50.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Comfortable sedan, music available",
                            RideDuration = new TimeSpan(0, 3, 0, 0, 0),
                            UserId = 5,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 6,
                            DepartureLocation = "City C",
                            DepartureTime = new DateTime(2024, 3, 12, 4, 55, 25, 377, DateTimeKind.Local).AddTicks(3336),
                            DepartureTimeFormatted = "2024-03-12 04:55",
                            Destination = "City D",
                            EstimatedFare = 80.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Spacious van, no smoking",
                            RideDuration = new TimeSpan(0, 4, 0, 0, 0),
                            UserId = 6,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 7,
                            DepartureLocation = "City A",
                            DepartureTime = new DateTime(2024, 3, 12, 3, 55, 25, 377, DateTimeKind.Local).AddTicks(3340),
                            DepartureTimeFormatted = "2024-03-12 03:55",
                            Destination = "City B",
                            EstimatedFare = 50.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Comfortable sedan, music available",
                            RideDuration = new TimeSpan(0, 3, 0, 0, 0),
                            UserId = 7,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 8,
                            DepartureLocation = "City C",
                            DepartureTime = new DateTime(2024, 3, 12, 4, 55, 25, 377, DateTimeKind.Local).AddTicks(3345),
                            DepartureTimeFormatted = "2024-03-12 04:55",
                            Destination = "City D",
                            EstimatedFare = 80.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Spacious van, no smoking",
                            RideDuration = new TimeSpan(0, 4, 0, 0, 0),
                            UserId = 8,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 9,
                            DepartureLocation = "City A",
                            DepartureTime = new DateTime(2024, 3, 12, 3, 55, 25, 377, DateTimeKind.Local).AddTicks(3349),
                            DepartureTimeFormatted = "2024-03-12 03:55",
                            Destination = "City B",
                            EstimatedFare = 50.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Comfortable sedan, music available",
                            RideDuration = new TimeSpan(0, 3, 0, 0, 0),
                            UserId = 9,
                            VehicleType = "Car"
                        },
                        new
                        {
                            RideId = 10,
                            DepartureLocation = "City C",
                            DepartureTime = new DateTime(2024, 3, 12, 4, 55, 25, 377, DateTimeKind.Local).AddTicks(3354),
                            DepartureTimeFormatted = "2024-03-12 04:55",
                            Destination = "City D",
                            EstimatedFare = 80.00m,
                            IsSmokingAllowed = false,
                            RideDetails = "Spacious van, no smoking",
                            RideDuration = new TimeSpan(0, 4, 0, 0, 0),
                            UserId = 10,
                            VehicleType = "Car"
                        });
                });

            modelBuilder.Entity("BlazorAppServer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Phone = "123-456-7890",
                            Username = "JohnDoe"
                        },
                        new
                        {
                            UserId = 2,
                            Phone = "987-654-3210",
                            Username = "JaneSmith"
                        },
                        new
                        {
                            UserId = 3,
                            Phone = "555-555-5555",
                            Username = "AliceWonder"
                        },
                        new
                        {
                            UserId = 4,
                            Phone = "999-999-9999",
                            Username = "BobBuilder"
                        },
                        new
                        {
                            UserId = 5,
                            Phone = "666-666-6666",
                            Username = "EveHacker"
                        },
                        new
                        {
                            UserId = 6,
                            Phone = "123-456-7890",
                            Username = "JohnDoe"
                        },
                        new
                        {
                            UserId = 7,
                            Phone = "987-654-3210",
                            Username = "JaneSmith"
                        },
                        new
                        {
                            UserId = 8,
                            Phone = "555-555-5555",
                            Username = "AliceWonder"
                        },
                        new
                        {
                            UserId = 9,
                            Phone = "999-999-9999",
                            Username = "BobBuilder"
                        },
                        new
                        {
                            UserId = 10,
                            Phone = "666-666-6666",
                            Username = "EveHacker"
                        });
                });

            modelBuilder.Entity("BlazorAppServer.Models.Ride", b =>
                {
                    b.HasOne("BlazorAppServer.Models.User", "User")
                        .WithMany("Rides")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BlazorAppServer.Models.User", b =>
                {
                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
